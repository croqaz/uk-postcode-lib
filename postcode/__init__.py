
"""
The library supports validating and formatting post codes for UK.
"""

import os
import re
import json


# Naive regex validation, source: stackoverflow.com/a/43793562/498361
CODE_REGEX = '(GIR 0A{2})|[A-PR-UWYZ](([A-HK-Y]?\d\d?)|(\d[A-HJKPSTUW])|'\
    '([A-HK-Y]\d[ABEHMNPRV-Y]))[ ]?\d[ABD-HJLNP-UW-Z]{2}'

# Regex from: https://en.wikipedia.org/wiki/Postcodes_in_the_United_Kingdom
# CODE_REGEX = '((?:GIR 0A{2})|(?:(?:(?:[A-Z][0-9]{1,2})|'\
#     '(?:(?:[A-Z][A-HJ-Y][0-9]{1,2})|(?:(?:[A-Z][0-9][A-Z])|'\
#     '(?:[A-Z][A-HJ-Y][0-9]?[A-Z])))) [0-9][A-Z]{2}))'

VALID_CODE = re.compile('^{}$'.format(CODE_REGEX), re.I)

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
postcodes = {}


class ValidationError(Exception):
    """Validation error."""
    pass


def load_database(db_name='post_optim.txt'):
    """
    Load the database generated by `csv_to_dict.py`.
    The database will be converted to a dict, containing sets.
    """
    global postcodes
    postcodes = {}
    with open(f'{BASE_DIR}/{db_name}') as infile:
        for key, val in json.load(infile).items():
            postcodes[key.encode('utf')] = set(val.encode('utf').split(b','))


def validate_code(code: str) -> bool:
    """
    Postal code validation, using a database.
    The database must be loaded first.
    Input: a code as string.
    Output: a boolean.
    """
    out_code, inw_code = format_code(code, join=False)
    return inw_code.encode('utf') in postcodes.get(out_code.encode('utf'), [])


def naive_validation(code: str) -> bool:
    """
    Naive code validation, using only a REGEX.
    Input: a code as string.
    Output: a boolean.
    """
    return bool(VALID_CODE.match(code))


def format_code(code: str, join: bool=True):
    """
    Input: a badly formatted code as string, possibly without spaces.
    Output: a standard formatted code.
    Raises ValidationError, if the code length is invalid.
    """
    # Minimum size is A99AA, 5 letters
    # Maximum size is DN55 1PT, 8 letters
    if len(code) < 5 and len(code) > 9:
        raise ValidationError(f'Code length "{len(code)}" is invalid')
    code = code.upper()
    # From start up to the last 3 letters
    out_code = code[:-3].strip()
    # Only the last 3 letters
    inw_code = code[-3:].strip()
    if join:
        return f'{out_code} {inw_code}'
    return out_code, inw_code
