
"""
The library supports validating and formatting post codes for UK.
"""

import os
import re
import json
import gzip
# from marisa_trie import Trie


# Naive regex validation, source: stackoverflow.com/a/43793562/498361
CODE_REGEX = '(GIR 0A{2})|[A-PR-UWYZ](([A-HK-Y]?\d\d?)|(\d[A-HJKPSTUW])|'\
    '([A-HK-Y]\d[ABEHMNPRV-Y]))[ ]?\d[ABD-HJLNP-UW-Z]{2}'

# Regex from: https://en.wikipedia.org/wiki/Postcodes_in_the_United_Kingdom
# CODE_REGEX = '((?:GIR 0A{2})|(?:(?:(?:[A-Z][0-9]{1,2})|'\
#     '(?:(?:[A-Z][A-HJ-Y][0-9]{1,2})|(?:(?:[A-Z][0-9][A-Z])|'\
#     '(?:[A-Z][A-HJ-Y][0-9]?[A-Z])))) [0-9][A-Z]{2}))'

VALID_CODE = re.compile('^{}$'.format(CODE_REGEX), re.I)

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
postcodes = []


class ValidationError(Exception):
    """Validation error."""
    pass


def load_database(db_name='postcodes.gz'):
    """
    Load the database generated by `import_csv.py`.
    The database will be converted to a dict, containing sets.
    """
    postcodes.clear()
    with gzip.open('{}/{}'.format(BASE_DIR, db_name), 'rt') as infile:
        for key, val in json.load(infile).items():
            key = key.encode('utf')
            for v in val.encode('utf').split(b','):
                postcodes.append(key + v)


def validate_code(code: str) -> bool:
    """
    Postal code validation, using a database.
    The database must be loaded first.
    Input: a code as string.
    Output: a boolean.
    """
    code = format_code(code).replace(' ', '')
    return code.encode('utf') in postcodes


def naive_validation(code: str) -> bool:
    """
    Naive code validation, using only a REGEX.
    Input: a code as string.
    Output: a boolean.
    """
    return bool(VALID_CODE.match(code))


def format_code(code: str, join: bool=True):
    """
    Input: a badly formatted code as string, possibly without spaces.
    Output: a standard formatted code.
    Raises ValidationError, if the code length is invalid.
    """
    # Minimum size is A99AA, 5 letters
    # Maximum size is DN55 1PT, 8 letters
    if len(code) < 5 or len(code) > 9:
        raise ValidationError('Code length "{}" is invalid'.format(len(code)))
    code = code.upper()
    # From start up to the last 3 letters
    out_code = code[:-3].strip()
    # Only the last 3 letters
    inw_code = code[-3:].strip()
    if join:
        return out_code + ' ' + inw_code
    return out_code, inw_code
